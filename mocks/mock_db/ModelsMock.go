// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/db/models/models_wrapper.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	models "leonel/prototype_b/pkg/db/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionsInterface is a mock of QuestionsInterface interface.
type MockQuestionsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionsInterfaceMockRecorder
}

// MockQuestionsInterfaceMockRecorder is the mock recorder for MockQuestionsInterface.
type MockQuestionsInterfaceMockRecorder struct {
	mock *MockQuestionsInterface
}

// NewMockQuestionsInterface creates a new mock instance.
func NewMockQuestionsInterface(ctrl *gomock.Controller) *MockQuestionsInterface {
	mock := &MockQuestionsInterface{ctrl: ctrl}
	mock.recorder = &MockQuestionsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionsInterface) EXPECT() *MockQuestionsInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQuestionsInterface) Create(title, statement, user_id string) (*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", title, statement, user_id)
	ret0, _ := ret[0].(*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockQuestionsInterfaceMockRecorder) Create(title, statement, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQuestionsInterface)(nil).Create), title, statement, user_id)
}

// Delete mocks base method.
func (m *MockQuestionsInterface) Delete(question_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", question_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQuestionsInterfaceMockRecorder) Delete(question_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuestionsInterface)(nil).Delete), question_id)
}

// Get mocks base method.
func (m *MockQuestionsInterface) Get(question_id string) (*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", question_id)
	ret0, _ := ret[0].(*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQuestionsInterfaceMockRecorder) Get(question_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQuestionsInterface)(nil).Get), question_id)
}

// Index mocks base method.
func (m *MockQuestionsInterface) Index() ([]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].([]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockQuestionsInterfaceMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockQuestionsInterface)(nil).Index))
}

// Update mocks base method.
func (m *MockQuestionsInterface) Update(question_id, question_title, question_statement string) (*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", question_id, question_title, question_statement)
	ret0, _ := ret[0].(*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockQuestionsInterfaceMockRecorder) Update(question_id, question_title, question_statement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockQuestionsInterface)(nil).Update), question_id, question_title, question_statement)
}

// MockAnswersInterface is a mock of AnswersInterface interface.
type MockAnswersInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAnswersInterfaceMockRecorder
}

// MockAnswersInterfaceMockRecorder is the mock recorder for MockAnswersInterface.
type MockAnswersInterfaceMockRecorder struct {
	mock *MockAnswersInterface
}

// NewMockAnswersInterface creates a new mock instance.
func NewMockAnswersInterface(ctrl *gomock.Controller) *MockAnswersInterface {
	mock := &MockAnswersInterface{ctrl: ctrl}
	mock.recorder = &MockAnswersInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswersInterface) EXPECT() *MockAnswersInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAnswersInterface) Get(answer_id string) (*models.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", answer_id)
	ret0, _ := ret[0].(*models.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAnswersInterfaceMockRecorder) Get(answer_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAnswersInterface)(nil).Get), answer_id)
}

// Update mocks base method.
func (m *MockAnswersInterface) Update(question_id, statement, user_id string) (*models.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", question_id, statement, user_id)
	ret0, _ := ret[0].(*models.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAnswersInterfaceMockRecorder) Update(question_id, statement, user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAnswersInterface)(nil).Update), question_id, statement, user_id)
}

// MockUsersInterface is a mock of UsersInterface interface.
type MockUsersInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsersInterfaceMockRecorder
}

// MockUsersInterfaceMockRecorder is the mock recorder for MockUsersInterface.
type MockUsersInterfaceMockRecorder struct {
	mock *MockUsersInterface
}

// NewMockUsersInterface creates a new mock instance.
func NewMockUsersInterface(ctrl *gomock.Controller) *MockUsersInterface {
	mock := &MockUsersInterface{ctrl: ctrl}
	mock.recorder = &MockUsersInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersInterface) EXPECT() *MockUsersInterfaceMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockUsersInterface) Index() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockUsersInterfaceMockRecorder) Index() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockUsersInterface)(nil).Index))
}

// UserQuestions mocks base method.
func (m *MockUsersInterface) UserQuestions(user_id string) ([]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserQuestions", user_id)
	ret0, _ := ret[0].([]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserQuestions indicates an expected call of UserQuestions.
func (mr *MockUsersInterfaceMockRecorder) UserQuestions(user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserQuestions", reflect.TypeOf((*MockUsersInterface)(nil).UserQuestions), user_id)
}
